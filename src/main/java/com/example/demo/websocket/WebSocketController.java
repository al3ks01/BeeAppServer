package com.example.demo.websocket;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import com.example.demo.model.Chat;
import com.example.demo.model.Message;
import com.example.demo.service.IChatService;

import lombok.val;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class WebSocketController {
    // You cannot integrate WebSocket with JWT for token validate.
    //private static final String token = "this is a token generated by your code!";
    private final SimpMessagingTemplate simpMessagingTemplate;
    @Autowired
	IChatService chatService;

    public WebSocketController(SimpMessagingTemplate simpMessagingTemplate) {
        this.simpMessagingTemplate = simpMessagingTemplate;
    }

    /**
     * <code>@MessageMapping</code> defines the endpoint for receiving messages, client will send websocket message
     * to endpoints defined in this annotation.
     * <code>@SendTo</code> defines the return value's target endpoint of this method, clients which subscribe to
     * this endpoint will receive the return value of this method.
     * This method will simply send messages received to all clients that subscribe to endpoint specified in
     * <code>@SendTo</code>, just like a broadcast
     *
     *
     * @param message            client message
     * @param authorizationToken customize header, for token validate
     * @return return client message to all clients that subscribe to <code>/b</code>
     */
    //
   /* @MessageMapping("/broadcast")
    @SendTo("/b")
    public Response broadcast(Welcome message, @Header(value = "authorization") String authorizationToken) {
        val response = new Response("Token check failed!");
        if (authorizationToken.equals(token)) {
            log.info("Token check success!!!");
            response.setResponse("Welcome, " + message.getMessage() + "!");
            log.info("Welcome, " + message.getMessage() + "!");
        } else {
            log.info(response.getResponse());
        }
        return response;
    }*/

    /**
     * Add a placeholder in <code>@MessageMapping</code> to get the dynamic param in websocket url, for dynamic
     * resending. Message sent to this endpoint will be resent to any clients that subscribe endpoint {@code /g/<groupId>}.
     * Just like a group chat.
     *
     * @param groupID group id
     * @param message client message
     */
   /* @MessageMapping("/group/{groupID}")
    public void group(@DestinationVariable int groupID, Message message) {
        log.info("Receive group message: [" + groupID + " -> " + message.getSenderId() + "]");
        Response response = new Response("Welcome to group " + groupID + ", " + message.getSenderId() + "!");
        simpMessagingTemplate.convertAndSend("/g/" + groupID, response);
    }*/

    /**
     * Send message to specify user depend on {@link ChatMessage#getUserID}, each user will subscribe himself/herself's endpoint
     * {@code /user/<userId>/msg}, just like point to point chat.
     * <p>
  
     *
     * @param chatMessage 聊天消息
     */
    @MessageMapping("/chat/{chatID}")
    public void chat(@DestinationVariable String chatID,Message message	) {
        log.info("Recibido mensaje privado: [" + message.getSenderId() + " -> " + message.getReceiverId() + ", " + message.getBody() + "]");
        //Response response = new Response("Receive message from user " + message.getSenderId() + ": " + message.getBody());
        
        Chat chat = chatService.findById(chatID).get();
        
        //Chat updateChat = new Chat(chat);
        chat.addMessage(message);
        
        chatService.update(chat);
        
        
        simpMessagingTemplate.convertAndSendToUser(String.valueOf(message.getSenderId()), "/msg", message);
        simpMessagingTemplate.convertAndSendToUser(String.valueOf(message.getReceiverId()), "/msg", message);
    }
}